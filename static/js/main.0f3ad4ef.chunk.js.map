{"version":3,"sources":["components/Searchbox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["pa2","height","width","padding","border","borderRadius","marginBottom","backgroundColor","Searchbox","searchfield","searchChange","style","type","placeholder","onChange","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","Scroll","props","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","pa1","textAlign","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+QAGOA,G,KAAM,CACTC,OAAQ,OACRC,MAAO,QACPC,QAAQ,SACRC,OAAO,kBACPC,aAAa,SACbC,aAAa,SACbC,gBAAgB,cAWLC,EARG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC5B,OACA,6BACA,2BAAOC,MAAOX,EAAKY,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,MCE5DK,EAdF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACI,yBAAKC,UAAU,aACX,6BACA,yBAAKC,IAAG,+BAA0BF,GAAMP,MAAO,CAACT,MAAO,QAASD,OAAQ,SAAUoB,IAAI,YAEtF,6BACI,wBAAIF,UAAU,WAAWH,GACzB,wBAAIG,UAAU,WAAWF,MCS1BK,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCJtBW,G,MAPA,SAACC,GACZ,OACI,yBAAKlB,MAAO,CAACmB,UAAU,SAAS1B,OAAO,kBAAkBH,OAAO,UAC/D4B,EAAME,YCkBAC,E,kDApBX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAEDI,MAAQ,CACRC,UAAS,GAJC,E,8DAQDC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACJ,uDAEHG,KAAKR,MAAME,a,GAjBEQ,aCKtBC,EAAM,CACTC,UAAU,UAgDEC,E,kDA3CX,aAAe,IAAD,8BACV,gBAcJC,eAAgB,SAACC,GACb,EAAKN,SAAS,CAAC7B,YAAYmC,EAAMC,OAAOC,SAdxC,EAAKb,MAAQ,CACTV,OAAO,GACPd,YAAY,IAJN,E,gEAQO,IAAD,OAChBsC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAGA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACf,OAAO4B,S,+BAQhC,IAAD,EACyBd,KAAKJ,MAA5BV,EADF,EACEA,OAAQd,EADV,EACUA,YACT2C,EAAgB7B,EAAO8B,QAAO,SAAAC,GAChC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS/C,EAAY8C,kBAEzD,OAAIhC,EAAOkC,OAIP,yBAAK9C,MAAO6B,GACZ,wBAAIrB,UAAU,QAAd,eACA,kBAAC,EAAD,CAAWT,aAAc2B,KAAKM,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAQ6B,OARX,2C,GA1BDb,aCAEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.0f3ad4ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\n const pa2 = {\r\n    height: '3rem',\r\n    width: '15rem',\r\n    padding:'0.1rem',\r\n    border:'5px solid black',\r\n    borderRadius:'0.5rem',\r\n    marginBottom:'0.5rem',\r\n    backgroundColor:'lightBlue'\r\n}\r\n\r\nconst Searchbox = ({searchfield,searchChange})=>{\r\n    return(\r\n    <div>\r\n    <input style={pa2} type='search' placeholder='search robots' onChange={searchChange}/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport './card.css';\r\n\r\n\r\nconst Card = ({name,email,id})=> {\r\n    return(\r\n        <div className='divi grow'>\r\n            <div>\r\n            <img src={`https://robohash.org/${id}`} style={{width: '10rem', height: '10rem'}} alt='photos' />\r\n            </div>\r\n            <div>\r\n                <h1 className='details'>{name}</h1>\r\n                <h2 className='details'>{email}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=> {\r\n    return(\r\n        <div>\r\n        {\r\n            robots.map((user,i)=>{\r\n            return ( \r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                />);\r\n            })\r\n        }\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'3px solid black',height:'600px'}}>\r\n        {props.children}\r\n        </div>\r\n        )\r\n}\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             hasError:false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return<h1>Ooops that is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component} from 'react';\r\nimport Searchbox from '../components/Searchbox'\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nconst pa1 = {\r\n   textAlign:'center'\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then (response=> response.json())\r\n        .then (users => this.setState({robots:users}));\r\n    \r\n    }\r\n\r\n    onSearchChange =(event)=> {\r\n        this.setState({searchfield:event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots= robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if(!robots.length) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        return (\r\n            <div style={pa1}>\r\n            <h1 className='head'>Robofriends</h1>\r\n            <Searchbox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n            <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <App/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}